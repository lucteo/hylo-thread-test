
@ffi("sleep")
fun sleep(_ seconds: Int) -> Int

fun thread_function() {
  print("Hello from thread!")
}

fun take_address<T>(_ x: inout T) -> MemoryAddress {
  return MemoryAddress(type_punning: mutable_pointer[to: &x])
}

fun deref(_ p: MemoryAddress) -> MemoryAddress {
  return PointerToMutable<MemoryAddress>(type_punning: p).unsafe_pointee()
}

public fun main() {
  var thread_id: pthread_t = 0
  var attr: pthread_attr_t = .new()

  let pattr = mutable_pointer[to: &attr]
  var pf = deref(take_address(fun () { thread_function() }))

  let _ = pthread_attr_init(pattr)
  let _ = pthread_attr_setstacksize(pattr, 8 * 1024 * 1024)
  let _ = pthread_create(mutable_pointer[to: &thread_id], pattr, pf)
  
  // let _ = sleep(1)

  var ret: MemoryAddress = .null()
  let _ = pthread_join(thread_id, mutable_pointer[to: &ret])
  let _ = pthread_detach(thread_id)
}